// Definition for a binary tree node.
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode(int x) { val = x; }
}

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        return sb.toString();
    }

    private void serializeHelper(TreeNode root, StringBuilder sb) {
        if (root == null) {
            sb.append("null,");
            return;
        }
        sb.append(root.val).append(",");
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        String[] nodes = data.split(",");
        LinkedList<String> list = new LinkedList<>(Arrays.asList(nodes));
        return deserializeHelper(list);
    }

    private TreeNode deserializeHelper(LinkedList<String> list) {
        if (list.getFirst().equals("null")) {
            list.removeFirst();
            return null;
        }
        TreeNode root = new TreeNode(Integer.parseInt(list.removeFirst()));
        root.left = deserializeHelper(list);
        root.right = deserializeHelper(list);
        return root;
    }
}
//Time Complexity: O(n)
//Space complexity: O(n)
