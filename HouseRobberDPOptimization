class Main {
    private static int houseRobber(int[] arr) {
        if (arr == null || arr.length == 0) return 0;
        int n = arr.length;
        if (n == 1) return arr[0];

        int[] dp = new int[n];
        dp[0] = arr[0];
        dp[1] = Math.max(arr[0], arr[1]);
        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], arr[i] + dp[i - 2]);
        }
        return dp[n - 1];
    }

    // constant-space version
    private static int houseRobberOptimized(int[] arr) {
        if (arr == null || arr.length == 0) return 0;
        int n = arr.length;
        if (n == 1) return arr[0];

        int prev2 = arr[0]; // dp[i-2]
        int prev1 = Math.max(arr[0], arr[1]); // dp[i-1]
        for (int i = 2; i < n; i++) {
            int cur = Math.max(prev1, arr[i] + prev2);
            prev2 = prev1;
            prev1 = cur;
        }
        return prev1;
    }

    public static void main(String[] args) {
        int[] arr = {7,8,1,4,5,3,7,6,9};
        System.out.println("Maximum House Robber = " + houseRobber(arr));
        System.out.println("Maximum House Robber (opt) = " + houseRobberOptimized(arr));
    }
}// Time complexity:O(n)
//Space complexity: O(1)
