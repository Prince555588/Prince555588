import java.util.*;

public class DFSExample {
    private Map<Integer, List<Integer>> graph = new HashMap<>();

    // Add edge to the graph (undirected)
    public void addEdge(int src, int dest) {
        graph.computeIfAbsent(src, k -> new ArrayList<>()).add(dest);
        graph.computeIfAbsent(dest, k -> new ArrayList<>()).add(src);
    }

    // Recursive DFS
    public void dfsRecursive(int node, Set<Integer> visited) {
        if (visited.contains(node)) return;

        visited.add(node);
        System.out.print(node + " ");

        for (int neighbor : graph.getOrDefault(node, new ArrayList<>())) {
            dfsRecursive(neighbor, visited);
        }
    }

    // Iterative DFS using Stack
    public void dfsIterative(int start) {
        Set<Integer> visited = new HashSet<>();
        Stack<Integer> stack = new Stack<>();

        stack.push(start);

        while (!stack.isEmpty()) {
            int node = stack.pop();

            if (!visited.contains(node)) {
                visited.add(node);
                System.out.print(node + " ");

                // Push neighbors in reverse order to mimic recursive DFS
                List<Integer> neighbors = graph.getOrDefault(node, new ArrayList<>());
                Collections.reverse(neighbors);
                for (int neighbor : neighbors) {
                    if (!visited.contains(neighbor)) {
                        stack.push(neighbor);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        DFSExample graph = new DFSExample();

        // Creating a sample graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 5);
        graph.addEdge(2, 6);

        System.out.println("DFS Recursive:");
        graph.dfsRecursive(0, new HashSet<>());

        System.out.println("\nDFS Iterative:");
        graph.dfsIterative(0);
    }
}
