class Solution {
    public int numIslands(char[][] grid) {
        if(grid==null || grid.length==0)
        
        {
            return 0;
        }
        
        int m= grid.length;
        int n= grid[0].length;
        int ans=0;
        for(int i=0;i< m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                {
                    dfs(grid,i,j);
                    ans++;
                }
            }
        }
        return ans;
        
    }
    private void dfs(char[][] grid,int i,int j)
    {
         if(i<0 || i>= grid.length || j<0 || j>=grid[0].length)
         {
            return;
         }
         if(grid[i][i]!='1')
         {
            return;
         }
         grid[i][j]='0'; // Mark this grid is visited

        dfs(grid,i+1,j);
        dfs(grid,i-1,j);
        dfs(grid,i,j+1);
        dfs(grid,i,j-1);
    }
}
//Time Complexity: O(m*n)
//Space Complexity: O(m*n)
