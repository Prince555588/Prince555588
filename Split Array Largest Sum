class Solution {
    public int splitArray(int[] nums, int k) {

       //apply the Binary Search with DP
       int low=0,high=0;
       for(int num:nums)
       {
        low=Math.max(low,num); //max element
        high+=num;

       }
       while(low<high)
       {
       int mid = low +(high-low) / 2;
       if(canSplit(nums,k,mid))
       {
          high=mid;// try smaller
       }
       else
       {
        low=mid+1;
       }
       }
       return low;
    }
       private boolean canSplit(int[] nums,int k,int maxSum)
       {
        int count=1,currentSum=0;
        for(int num: nums)
        {
            if(currentSum+num>maxSum)
            {
                count++;
                currentSum=num;
                if(count>k)
                {
                    return false;
                }
                else
                {
                    currentSum+=num;
                }
            }
        }
        return true;
       }
    }
    //Time Complexity: O(n*log(sum(n)))
    //Space Complexity: O(1)
