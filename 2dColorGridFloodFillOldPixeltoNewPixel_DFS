import java.util.*;

class GfG {

    // Helper method for DFS traversal
    static void dfs(int[][] image, int x, int y, 
                        int oldColor, int newColor){

        // Base case: check for out-of-bound indices or mismatched color
        if (x < 0 || x >= image.length || 
            y < 0 || y >= image[0].length || 
            image[x][y] != oldColor) {
            return; // Backtrack if invalid
        }

        // Change the color of the current pixel
        image[x][y] = newColor;

        // Recursively call DFS in all four directions
        dfs(image, x + 1, y, oldColor, newColor); 
        dfs(image, x - 1, y, oldColor, newColor);
        dfs(image, x, y + 1, oldColor, newColor); 
        dfs(image, x, y - 1, oldColor, newColor); 
        
    }

    // Main function to perform flood fill
    static int[][] floodFill(int[][] image, int sr, int sc, int newColor){

        // If the starting pixel already has the new color, no need 
        // to process
        if (image[sr][sc] == newColor) {
            return image;
        }

        // Call DFS with the original color of the starting pixel
        dfs(image, sr, sc, image[sr][sc], newColor);

        // Return the updated image
        return image;
    }

    // Driver code to test the flood fill function
    public static void main(String[] args) {

        // Define the image matrix
        int[][] image = {
            {1, 1, 1, 0},
            {0, 1, 1, 1},
            {1, 0, 1, 1}
        };

        // Starting pixel and the new color
        int sr = 1, sc = 2, newColor = 2;

        // Perform flood fill
        int[][] result = floodFill(image, sr, sc, newColor);

        for (int[] row : result) {
            for (int pixel : row) {
                System.out.print(pixel + " ");
            }
            System.out.println();
        }
    }
}
